name: .NET Build and Test Coverage

on:
    push:
        branches:
            - master
    pull_request:
        types: [opened, synchronize, reopened]

jobs:
    build:
        name: Build .NET Solution
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup .NET 9
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: "9.0.x"

            - name: Install global tools
              run: |
                  dotnet tool install --global coverlet.console
                  dotnet tool install --global dotnet-sonarscanner

            - name: Restore dependencies
              run: dotnet restore StreamHub.sln

            - name: Start Sonar scan
              run: |
                  dotnet sonarscanner begin \
                    /k:"Janobob_StreamHub" \
                    /o:"janobob" \
                    /n:"StreamHub" \
                    /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
                    /d:sonar.verbose="true" \
                    /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
                    /d:sonar.exclusions="**/bin/**,**/obj/**,**/*.g.cs,**/*.designer.cs,**/*.AssemblyInfo.cs"

            - name: Build Solution
              run: dotnet build StreamHub.sln --configuration Release --no-restore

            - name: Run Tests with Coverage
              run: |
                  dotnet test StreamHub.sln \
                    --no-build \
                    --configuration Release \
                    /p:CollectCoverage=true \
                    /p:CoverletOutputFormat=opencover \
                    /p:CoverletOutput=./TestResults/coverage.opencover.xml

            - name: Verify coverage report
              run: |
                  echo "Contents of TestResults folder:"
                  ls -la ./TestResults
                  echo "Coverage report snippet:"
                  head -n 20 ./TestResults/coverage.opencover.xml

            - name: End Sonar scan
              run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
