name: .NET Build and Test Coverage

on:
    push:
        branches: [master]
    pull_request:
        types: [opened, synchronize, reopened]

jobs:
    build:
        name: Build and Test .NET Solution
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup .NET 9
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: "9.0.x"

            - name: Install global tools
              run: |
                  dotnet tool install --global dotnet-sonarscanner
                  dotnet tool install --global dotnet-reportgenerator-globaltool
              env:
                  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

            - name: Restore dependencies
              run: dotnet restore StreamHub.sln

            - name: Start Sonar scan
              run: |
                  dotnet sonarscanner begin \
                    /k:"Janobob_StreamHub" \
                    /o:"janobob" \
                    /n:"StreamHub" \
                    /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
                    /d:sonar.verbose="true" \
                    /d:sonar.cs.opencover.reportsPaths="**/coverage/*.xml" \
                    /d:sonar.exclusions="**/bin/**,**/obj/**,**/*.g.cs,**/*.designer.cs,**/*.AssemblyInfo.cs"

            - name: Build solution
              run: dotnet build StreamHub.sln --configuration Release --no-restore

            - name: Run Tests with Coverage (per project)
              run: |
                  COVERAGE_DIR=$(pwd)/coverage
                  mkdir -p "$COVERAGE_DIR"

                  for proj in $(find . -name "*.csproj" | grep -E "Test"); do
                    name=$(basename "$proj" .csproj)
                    echo "Testing $proj..."
                    dotnet test "$proj" \
                      --no-build \
                      --configuration Release \
                      /p:CollectCoverage=true \
                      /p:CoverletOutputFormat=opencover \
                      /p:CoverletOutput="$COVERAGE_DIR/$name.xml"
                  done

            # - name: Merge Coverage Reports
            #   run: |
            #       mkdir -p coverage/report

            #       reportgenerator \
            #         -reports:"coverage/*.xml" \
            #         -targetdir:"coverage/report" \
            #         -reporttypes:HtmlSummary;Cobertura;opencover

            #       cp coverage/report/Summary.opencover.xml coverage.opencover.xml

            # - name: Upload Coverage Report
            #   uses: actions/upload-artifact@v4
            #   with:
            #       name: coverage-report
            #       path: coverage.opencover.xml

            - name: End Sonar scan
              run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

            # - name: Upload HTML Coverage Report
            #   uses: actions/upload-artifact@v4
            #   with:
            #       name: html-coverage
            #       path: coverage/report
